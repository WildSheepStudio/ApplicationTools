#pragma once
#ifndef plr_log_h
#define plr_log_h

#include <plr/def.h>

#define PLR_LOG(...)              do { plr::internal::Log(__VA_ARGS__); } while (0)
#define PLR_LOG_ERR(...)          do { plr::internal::LogError(__VA_ARGS__); } while (0)
#ifdef PLR_DEBUG
	#define PLR_LOG_DBG(...)      do { plr::internal::LogDebug(__VA_ARGS__); } while (0)
#else
	#define PLR_LOG_DBG(...)      do { } while(0)
#endif

namespace plr {

enum class LogType
{
	kLog,
	kError,
	kDebug
};

/// Typedef for log callbacks. Callbacks receive a message (as passed to the 
/// PLR_LOG variant), plus an enum indicating whether the log was generated by
/// PLR_LOG, PLR_LOG_ERR or PLR_LOG_DBG.
/// \ingroup plr_core
typedef void (LogCallback)(const char* _msg, LogType _type);

/// Set the current log callback. The default is 0.
/// \ingroup plr_core
void SetLogCallback(LogCallback* _callback);

/// \return Current log callback. The default is 0.
/// \ingroup plr_core
LogCallback* GetLogCallback();

} // namespace plr

namespace plr { namespace internal {

void Log     (const char* _fmt, ...);
void LogError(const char* _fmt, ...);
void LogDebug(const char* _fmt, ...);

} } // namespace plr::internal

#endif // plr_log_h
